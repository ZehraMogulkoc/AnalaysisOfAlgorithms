package lab_1;

import java.util.Random;

// Java program for implementation of Selection Sort
class SelectionSort
{
	public static void statistics(int array_size, int n_repetitions) {
		long min_time, max_time, sum_time;
		double average_time;
		SelectionSort ob = new SelectionSort();
		int array[] = new int[array_size];

		Random rand = new Random();
		rand.setSeed(System.currentTimeMillis());

		min_time =99999;
		max_time = 0;
		average_time = 0.0;
		sum_time = 0;
		
		for (int k = 0; k < n_repetitions; k++) {
			// initialize elements of array with random integers
			for (int i = 0; i < array.length; i++)
				array[i] = rand.nextInt(100);
         	// call insertion sort method
			long startTime = System.currentTimeMillis(); 
			ob.sort(array);
			long endTime = System.currentTimeMillis(); 
			// compute min_time, max_time, sum_time
			double mymin_time=endTime-startTime;
			double mymax_time=endTime-startTime;
			sum_time=(long) (sum_time+mymax_time);
			
			if(mymin_time<min_time){
				min_time=(long) mymin_time;
			}
			if(mymax_time>max_time){
				max_time=(long) mymax_time;
			}

		}
	
		average_time = (double) sum_time / (double) n_repetitions;

		System.out.printf("Min time: %d\n", min_time);
		System.out.printf("Average time: %.2f\n", average_time);
		System.out.printf("Max time: %d\n", max_time);
	}
	void sort(int arr[])
	{
		int n = arr.length;

		// One by one move boundary of unsorted subarray
		for (int i = 0; i < n-1; i++)
		{
			// Find the minimum element in unsorted array
			int min_idx = i;
			for (int j = i+1; j < n; j++)
				if (arr[j] < arr[min_idx])
					min_idx = j;

			// Swap the found minimum element with the first
			// element
			int temp = arr[min_idx];
			arr[min_idx] = arr[i];
			arr[i] = temp;
		}
	}

	// Prints the array
	void printArray(int arr[])
	{
		int n = arr.length;
		for (int i=0; i<n; ++i)
			System.out.print(arr[i]+" ");
		System.out.println();
	}

	// Driver code to test above
	public static void main(String args[])
	{
		SelectionSort ob = new SelectionSort();
		int array_size = 10;
		int n_repetitions = 10;

		int array[] = new int[array_size];

		Random rand = new Random();
		rand.setSeed(System.currentTimeMillis());

		// part(b) choosing one integer array and showing that the sort method
		// works

		// initialize elements of array with random integers
		for (int i = 0; i < array.length; i++)
			array[i] = rand.nextInt(100);

	ob.printArray(array); 
		ob.sort(array);
		ob.printArray(array); 

		// part(c) min, average, max running times

		statistics(1000, 1000);
		statistics(10000, 1000);
	}
}
/* This code is contributed by Rajat Mishra*/
